{"openapi":"3.0.2","info":{"title":"FastAPI","version":"0.1.0"},"paths":{"/v1/imdb/movies":{"get":{"tags":["IMDB"],"summary":"Search Movies","description":"Endpoint to fetch movie records from database with different types of search and sort parameters\n\nEXAMPLE ENDPOINTS :\n\n`/movie?search=dark&genre=family,fantasy&range=popularity&srange=0&erange=10&sortby=popularity&orderby=asc`\n\n`/movie?search=dark&genre=family,fantasy&range=imdb_score&srange=5&erange=10&sortby=imdb_score&orderby=asc`\n\n`/movie?search=dark&genre=family,fantasy&range=popularity&srange=0&erange=50`\n\n`/movie?search=dark&genre=family,fantasy`\n\n`/movie?sortby=imdb_score&orderby=asc`\n\n`/movie?search=dark`\n\n`/movie?orderby=desc`\n\n`/movie`\n\n\nReturns:\n    dict: List of movies and its details","operationId":"search_movies_v1_imdb_movies_get","parameters":[{"required":false,"schema":{"title":"Search","type":"string"},"name":"search","in":"query"},{"required":false,"schema":{"title":"Genre","type":"string"},"name":"genre","in":"query"},{"required":false,"schema":{"title":"P Srange","type":"integer"},"name":"p_srange","in":"query"},{"required":false,"schema":{"title":"P Erange","type":"integer"},"name":"p_erange","in":"query"},{"required":false,"schema":{"title":"S Srange","type":"integer"},"name":"s_srange","in":"query"},{"required":false,"schema":{"title":"S Erange","type":"integer"},"name":"s_erange","in":"query"},{"required":false,"schema":{"title":"Sortby","type":"string"},"name":"sortby","in":"query"},{"required":false,"schema":{"title":"Orderby","type":"string"},"name":"orderby","in":"query"},{"required":false,"schema":{"title":"Limit","type":"integer"},"name":"limit","in":"query"},{"required":false,"schema":{"title":"Offset","type":"integer"},"name":"offset","in":"query"}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/server__imdb__models__schema__GenericResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["IMDB"],"summary":"Add Movies","description":"Endpoint to add new movie into the system, before adding the received data into database\nthe pydantic validations is performed to check for any missing data or wrong type.\n\nRaises:\n    HTTPException: `STATUS 500`, General Exception\n\nReturns:\n    dict: Added Movie","operationId":"add_movies_v1_imdb_movies_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MoviesSchema"}}},"required":true},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/server__imdb__models__schema__GenericResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"JWTBearer":[]}]}},"/v1/imdb/movies/{movie_id}":{"put":{"tags":["IMDB"],"summary":"Update Movies","description":"Update details about a particular movie, before updating the received data into database\nthe pydantic validations is performed to check for any missing data or wrong type.\n\nRaises:\n    HTTPException: `STATUS 400`, Invalid Object ID\n    HTTPException: `STATUS 404`, Item does not exist\n    HTTPException: `STATUS 500`, General Exception\n\nReturns:\n    dict: Updated movie data","operationId":"update_movies_v1_imdb_movies__movie_id__put","parameters":[{"required":true,"schema":{"title":"Movie Id","type":"string"},"name":"movie_id","in":"path"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MoviesSchema"}}},"required":true},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/server__imdb__models__schema__GenericResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"JWTBearer":[]}]},"delete":{"tags":["IMDB"],"summary":"Delete Movies","description":"Endpoint to delete a particular movie details from the database based on movie_id / ObjectId\n\nRaises:\n    HTTPException: `STATUS 400`, Invalid Object ID\n    HTTPException: `STATUS 500`, General Exception\n\nReturns:\n    dict: Delete status","operationId":"delete_movies_v1_imdb_movies__movie_id__delete","parameters":[{"required":true,"schema":{"title":"Movie Id","type":"string"},"name":"movie_id","in":"path"}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/server__imdb__models__schema__GenericResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"JWTBearer":[]}]}},"/v1/accounts/signup":{"post":{"tags":["Accounts"],"summary":"Signup","description":"API endpoint for `registering new users in system`, first check if user already exists in database\nif already exists then send error response else successfully insert the user in database and generate\nnew access token for the newly registered user with expirty of 1 hour.\n\nArgs:\n    `user_data` (UserSchema): singup pydantic schema\n\nRaises:\n    HTTPException: `STATUS 409`, If user already exists in database\n    HTTPException: `STATUS 500`, If any general exception occurs\n\nReturns:\n    HTTPResponse: `STATUS 201 CREATED` for successful registration of user, else failure reponse","operationId":"signup_v1_accounts_signup_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSchema"}}},"required":true},"responses":{"201":{"description":"Authorization Token","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/accounts/login":{"post":{"tags":["Accounts"],"summary":"User Login","description":"API endpoint for login, first check if user exists in database if exists then\nverify the plain password with previously hashed password stored in database.\nlastly generate JWT access token for the user with payload containing `user_id` and `role`\n\nArgs:\n    `UserData` (UserLoginSchema, optional): [description]. Defaults to Body(...).\n\nRaises:\n    HTTPException: `STATUS 404`, If user does not exists in database\n    HTTPException: `STATUS 403`, If user provided credentials are wrong\n    HTTPException: `STATUS 500`, If any general exception occurs\n\nReturns:\n    HTTPResponse: `STATUS 200`, Successfully logged in","operationId":"user_login_v1_accounts_login_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoginSchema"}}},"required":true},"responses":{"200":{"description":"Authorization Token","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/accounts/me":{"get":{"tags":["Accounts"],"summary":"Show Account","description":"`Show account details` for each particular user\n\nArgs:\n    `user_id` (str): Current user user_id\n\nRaises:\n    HTTPException: `STATUS 404`, If user does not exists in database\n    HTTPException: `STATUS 500`, If any general exception occurs\n\nReturns:\n    HTTPResponse: `STATUS 200` Success, with user details","operationId":"show_account_v1_accounts_me_get","responses":{"200":{"description":"User Account discription","content":{"application/json":{"schema":{"$ref":"#/components/schemas/server__accounts__models__schema__GenericResponse"}}}}},"security":[{"JWTBearer":[]}]}},"/":{"get":{"tags":["Root"],"summary":"Read Root","operationId":"read_root__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}}},"components":{"schemas":{"HTTPValidationError":{"title":"HTTPValidationError","type":"object","properties":{"detail":{"title":"Detail","type":"array","items":{"$ref":"#/components/schemas/ValidationError"}}}},"MoviesSchema":{"title":"MoviesSchema","required":["popularity","director","genre","imdb_score","name"],"type":"object","properties":{"popularity":{"title":"Popularity","type":"number"},"director":{"title":"Director","type":"string"},"genre":{"title":"Genre","type":"array","items":{"type":"string"}},"imdb_score":{"title":"Imdb Score","type":"number"},"name":{"title":"Name","type":"string"}},"example":{"popularity":99,"director":"Cristopher nolan","genre":["thriller","action"],"imdb_score":9.6,"name":"The dark knight"}},"Token":{"title":"Token","type":"object","properties":{"access_token":{"title":"Access Token","type":"string"}}},"UserLoginSchema":{"title":"UserLoginSchema","required":["email","password"],"type":"object","properties":{"email":{"title":"Email","type":"string","format":"email"},"password":{"title":"Password","type":"string"}},"example":{"email":"arizsayed777@gmail.com","password":"123456"}},"UserSchema":{"title":"UserSchema","required":["fullname","email","password"],"type":"object","properties":{"fullname":{"title":"Fullname","type":"string"},"email":{"title":"Email","type":"string","format":"email"},"password":{"title":"Password","type":"string"}},"example":{"fullname":"Azhar sayyed","email":"arizsayed777@gmail.com","password":"123456"}},"ValidationError":{"title":"ValidationError","required":["loc","msg","type"],"type":"object","properties":{"loc":{"title":"Location","type":"array","items":{"type":"string"}},"msg":{"title":"Message","type":"string"},"type":{"title":"Error Type","type":"string"}}},"server__accounts__models__schema__GenericResponse":{"title":"GenericResponse","type":"object","properties":{"data":{"title":"Data","type":"array","items":{"type":"object"}},"code":{"title":"Code","type":"integer"},"message":{"title":"Message","type":"string"}}},"server__imdb__models__schema__GenericResponse":{"title":"GenericResponse","type":"object","properties":{"data":{"title":"Data","type":"array","items":{"type":"object"}},"code":{"title":"Code","type":"integer"},"message":{"title":"Message","type":"string"}}}},"securitySchemes":{"JWTBearer":{"type":"http","scheme":"bearer"}}}}